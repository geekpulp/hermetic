import { schema as fullSchema } from 'hermetic-common';

const description = ['# Hermetic Model Schema #'];

const describeArray = (field, indent) => {
  const result = [];
  if (!field.items.length === 1) {
    return result;
  }
  if (field.items[0].type === 'object') {
    // eslint-disable-next-line no-use-before-define
    result.push(...describeObject(field.items[0], indent + 2, true));
  } else if (field.items[0].type === 'string') {
    result.push(`${' '.repeat(indent - 2)}- string`);
  }
  return result;
};

const getFieldComment = (field) => {
  const result = [];
  if (field.flags && field.flags.presence === 'optional') {
    result.push('optional');
  }
  if ((field.type !== 'string') && (field.type !== 'any')) {
    result.push(field.type);
  }
  if (field.rules) {
    const fk = field.rules.find(r => r.name === 'fk');
    if (fk) {
      result.push(`refers to ${fk.arg.path}`);
    }
  }
  if (field.valids && field.valids.length) {
    const valids = field.valids.map(v => `"${v}"`).join(', ');
    const validsDescriptor = (field.flags && field.flags.allowOnly)
      ? '- choose from: ' : '- suggested values:';
    result.push(`${validsDescriptor} ${valids}`);
  }
  return result.join(' ');
};

const describeObject = (schema, indent, isArrayElement) => Object
  .getOwnPropertyNames(schema.children)
  .sort((a, b) => a.localeCompare(b))
  .map((key, index) => {
    const result = [];
    let field = schema.children[key];
    if ((field.type === 'alternatives') && field.base) {
      field = field.base;
    }

    const fieldComment = getFieldComment(field);
    if (fieldComment) {
      result.push(`${' '.repeat(indent)}# ${key}: ${fieldComment}`);
    }
    if (field.description) {
      result.push(...field.description.split('\n')
        .map(d => `${' '.repeat(indent)}# ${key}: ${d}`));
    }
    if (isArrayElement && (index === 0)) {
      result.push(`${' '.repeat(indent - 2)}- ${key}:`);
    } else {
      result.push(`${' '.repeat(indent)}${key}:`);
    }
    if (field.type === 'object') {
      result.push(...describeObject(field, indent + 2));
      result.push('');
    } else if (field.type === 'array') {
      result.push(...describeArray(field, indent + 2));
    } else {
      // simple field
      const fieldDesc = result.pop();
      const example = (field.type === 'number') ? 42 : field.type;
      result.push(`${fieldDesc} ${example}`);
    }
    return result;
  })
  .reduce((prev, current) => {
    prev.push(...current);
    return prev;
  }, []);

const schemaDesc = fullSchema.describe();

description.push('```yaml');
description.push(...describeObject(schemaDesc, 0));
description.push('```');
description.push('\n This file is autogenerated by server/bin/describe-schema.sh');

console.log(description.join('\n'));
